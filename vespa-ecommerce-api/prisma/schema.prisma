generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// =================================
// ENUMS
// =================================

enum Role {
  ADMIN
  RESELLER
  MEMBER
}

enum OrderStatus {
  PENDING
  PAID
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
  COMPLETED
}

enum PaymentStatus {
  PENDING
  SUCCESS
  FAILED
  EXPIRED
}

// =================================
// MODELS
// =================================

model User {
  id                        String                   @id @default(cuid())
  email                     String                   @unique
  name                      String?
  password                  String
  role                      Role                     @default(MEMBER)
  createdAt                 DateTime                 @default(now())
  updatedAt                 DateTime                 @updatedAt
  emailVerified             DateTime?
  verificationToken         String?
  verificationTokenExpires  DateTime?
  passwordResetToken        String?
  passwordResetTokenExpires DateTime?
  defaultDiscountPercentage Float                    @default(0)
  productDiscounts          UserProductDiscount[]
  categoryDiscounts         UserCategoryDiscount[]
  orders                    Order[]
  reviews                   Review[]
  wishlists                 Wishlist[]
  addresses                 Address[]
  cart                      Cart?
  tier                      ResellerTier?            @relation(fields: [resellerTierId], references: [id])
  resellerTierId            String?
  accurateCustomerNo        String?                  @unique

  @@index([resellerTierId])
}

model ResellerTier {
  id          String @id @default(cuid())
  name        String @unique
  description String?
  users       User[]
}

model UserProductDiscount {
  id                 String  @id @default(cuid())
  discountPercentage Float
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId             String
  product            Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId          String

  @@unique([userId, productId])
  @@index([userId])
  @@index([productId])
}

model UserCategoryDiscount {
  id                 String   @id @default(cuid())
  discountPercentage Float
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId             String
  category           Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId         String

  @@unique([userId, categoryId])
  @@index([userId])
  @@index([categoryId])
}

model Brand {
  id       String    @id @default(cuid())
  name     String    @unique
  logoUrl  String?
  products Product[]
}

model Product {
  id                   String                  @id @default(cuid())
  sku                  String                  @unique
  name                 String
  description          String?
  price                Float
  stock                Int                     @default(0)
  weight               Int                     @default(1000)
  createdAt            DateTime                @default(now())
  updatedAt            DateTime                @updatedAt
  piaggioCode          String?
  models               String?
  images               ProductImage[]
  category             Category?               @relation(fields: [categoryId], references: [id])
  categoryId           String?
  brand                Brand?                  @relation(fields: [brandId], references: [id])
  brandId              String?
  orderItems           OrderItem[]
  reviews              Review[]
  wishlists            Wishlist[]
  erpSyncLog           ErpSyncLog[]
  cartItems            CartItem[]
  userProductDiscounts UserProductDiscount[]

  @@index([categoryId])
  @@index([brandId])
}

model ProductImage {
  id        String   @id @default(cuid())
  url       String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String
  createdAt DateTime @default(now())

  @@index([productId])
}

model Category {
  id                    String                   @id @default(cuid())
  name                  String                   @unique
  imageUrl              String?
  products              Product[]
  userCategoryDiscounts UserCategoryDiscount[]
  createdAt             DateTime                 @default(now())
  updatedAt             DateTime                 @updatedAt
}

model Order {
  id                         String      @id @default(cuid())
  orderNumber                String      @unique @default(cuid())
  subtotal                   Float       @default(0)
  discountAmount             Float       @default(0)
  taxAmount                  Float       @default(0)
  shippingCost               Float
  totalAmount                Float
  status                     OrderStatus @default(PENDING)
  createdAt                  DateTime    @default(now())
  updatedAt                  DateTime    @updatedAt
  user                       User        @relation(fields: [userId], references: [id])
  userId                     String
  shippingAddress            String
  destinationPostalCode      String?
  destinationAreaId          String?
  courier                    String
  items                      OrderItem[]
  payment                    Payment?
  shipment                   Shipment?
  accurateSalesInvoiceId     Int?
  accurateSalesInvoiceNumber String?
  accurateSalesReceiptId     Int?
  accurateSalesOrderNumber   String?

  @@index([userId])
}

model OrderItem {
  id        String  @id @default(cuid())
  quantity  Int
  price     Float
  order     Order   @relation(fields: [orderId], references: [id])
  orderId   String
  product   Product @relation(fields: [productId], references: [id])
  productId String

  @@unique([orderId, productId])
  @@index([orderId])
  @@index([productId])
}

model Payment {
  id                    String               @id @default(cuid())
  order                 Order                @relation(fields: [orderId], references: [id])
  orderId               String               @unique
  amount                Float
  method                String
  status                PaymentStatus        @default(PENDING)
  transactionId         String?
  proofOfPayment        String?
  redirectUrl           String?
  createdAt             DateTime             @default(now())
  updatedAt             DateTime             @updatedAt
  manualPaymentMethodId String?
  manualPaymentMethod   ManualPaymentMethod? @relation(fields: [manualPaymentMethodId], references: [id])

  @@index([manualPaymentMethodId])
}

model Shipment {
  id                String    @id @default(cuid())
  order             Order     @relation(fields: [orderId], references: [id])
  orderId           String    @unique
  courier           String
  trackingNumber    String?
  shippingCost      Float
  estimatedDelivery DateTime?
  createdAt         DateTime  @default(now())
}

model Address {
  id         String  @id @default(cuid())
  street     String
  postalCode String
  phone      String?
  provinceId String?
  province   String
  cityId     String?
  city       String
  districtId String
  district   String
  isDefault  Boolean @default(false)
  user       User    @relation(fields: [userId], references: [id])
  userId     String

  @@index([userId])
}

model Voucher {
  id                String   @id @default(cuid())
  code              String   @unique
  description       String?
  discountValue     Float
  isPercentage      Boolean  @default(false)
  maxDiscountAmount Float?
  minPurchaseAmount Float    @default(0)
  validFrom         DateTime
  validUntil        DateTime
  maxUses           Int?
  usageCount        Int      @default(0)
  isActive          Boolean  @default(true)
}

model ErpSyncLog {
  id        String   @id @default(cuid())
  syncType  String
  status    String
  message   String?
  runAt     DateTime @default(now())
  product   Product? @relation(fields: [productId], references: [id])
  productId String?

  @@index([productId])
}

model Review {
  id        String   @id @default(cuid())
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  product   Product  @relation(fields: [productId], references: [id])
  productId String

  @@index([userId])
  @@index([productId])
}

model Wishlist {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  createdAt DateTime @default(now())

  @@unique([userId, productId])
  @@index([userId])
  @@index([productId])
}

model Cart {
  id        String     @id @default(cuid())
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  user      User       @relation(fields: [userId], references: [id])
  userId    String     @unique
  items     CartItem[]
}

model CartItem {
  id        String  @id @default(cuid())
  quantity  Int
  cart      Cart    @relation(fields: [cartId], references: [id], onDelete: Cascade)
  cartId    String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String

  @@unique([cartId, productId])
  @@index([cartId])
  @@index([productId])
}

model AppSettings {
  key         String   @id
  value       String
  description String?
  updatedAt   DateTime @updatedAt
}

model ManualPaymentMethod {
  id               String    @id @default(cuid())
  bankName         String
  accountHolder    String
  accountNumber    String    @unique
  logoUrl          String?
  isActive         Boolean   @default(true)
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  paymentMethodKey String    @unique
  accurateBankName String
  accurateBankId   Int?
  accurateBankNo   String?
  payments         Payment[]
}

model PaymentMethodMapping {
  id               String   @id @default(cuid())
  paymentMethodKey String   @unique
  accurateBankName String
  description      String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  accurateBankId   Int?
  accurateBankNo   String?
}

model AccurateOAuth {
  id           String   @id @default(cuid())
  accessToken  String   @db.Text
  refreshToken String   @db.Text
  expiresAt    DateTime
  scope        String?
  tokenType    String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  dbId         String?
  dbHost       String?
  dbSession    String?
  branchName   String?
}

// ============== NEW MODELS ==============

enum BannerType {
  HERO
  MIDDLE
}

model HomePageBanner {
  id        String     @id @default(cuid())
  title     String?    
  subtitle  String?
  imageUrl  String
  linkUrl   String?
  type      BannerType
  isActive  Boolean    @default(true)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}